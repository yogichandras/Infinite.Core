//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using INFINITE.CORE.Data.Base.Interface;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;
using Microsoft.Extensions.Logging;
using {{namespace}}Data;
using {{namespace}}Data.Model;
using {{namespace}}Shared.Attributes;
using {{namespace}}Core.Response;
using {{namespace}}Core.Helper;

namespace {{namespace}}Core.{{name}}.Query
{
    public class Get{{name}}ListRequest : ListRequest,IListRequest<Get{{name}}ListRequest>,IRequest<ListResponse<{{name}}Response>>
    {
    }
    internal class Get{{name}}ListHandler : IRequestHandler<Get{{name}}ListRequest, ListResponse<{{name}}Response>>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public Get{{name}}ListHandler(
            ILogger<Get{{name}}ListHandler> logger,
            IMapper mapper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _context = context;
        }

        public async Task<ListResponse<{{name}}Response>> Handle(Get{{name}}ListRequest request, CancellationToken cancellationToken)
        {
            ListResponse<{{name}}Response> result = new ListResponse<{{name}}Response>();
            try
            {
				var query = _context.Entity<{{namespace}}Data.Model.{{model}}>().AsQueryable();

				#region Filter
				Expression<Func<{{namespace}}Data.Model.{{model}}, object>> column_sort = null;
				List<Expression<Func<{{namespace}}Data.Model.{{model}}, bool>>> where = new List<Expression<Func<{{namespace}}Data.Model.{{model}}, bool>>>();
				if (request.Filter != null && request.Filter.Count > 0)
				{
					foreach (var f in request.Filter)
					{
						var obj = ListExpression(f.Search, f.Field, true);
						if (obj.where != null)
							where.Add(obj.where);
					}
				}
				if (where != null && where.Count() > 0)
				{
					foreach (var w in where)
					{
						query = query.Where(w);
					}
				}
				if (request.Sort != null)
                {
					column_sort = ListExpression(request.Sort.Field, request.Sort.Field, false).order!;
					if(column_sort != null)
						query = request.Sort.Type == SortTypeEnum.ASC ? query.OrderBy(column_sort) : query.OrderByDescending(column_sort);
					else
						query = query.OrderBy(d=>d.{{primary_key_name}});
				}
				#endregion

				var query_count = query;
				if (request.Start.HasValue && request.Length.HasValue && request.Length > 0)
					query = query.Skip((request.Start.Value - 1) * request.Length.Value).Take(request.Length.Value);
				var data_list = await query.ToListAsync();

				result.List = _mapper.Map<List<{{name}}Response>>(data_list);
				result.Filtered = data_list.Count();
				result.Count = await query_count.CountAsync();
				result.OK();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Get List {{name}}", request);
                result.Error("Failed Get List {{name}}", ex.Message);
            }
            return result;
        }

        #region List Utility
		private (Expression<Func<{{namespace}}Data.Model.{{model}}, bool>> where, Expression<Func<{{namespace}}Data.Model.{{model}}, object>> order) ListExpression(string search, string field, bool is_where)
		{
			Expression<Func<{{namespace}}Data.Model.{{model}}, object>> result_order = null;
			Expression<Func<{{namespace}}Data.Model.{{model}}, bool>> result_where = null;
            if (!string.IsNullOrWhiteSpace(search) && !string.IsNullOrWhiteSpace(field))
            {
                field = field.Trim().ToLower();
                search = search.Trim().ToLower();
                switch (field)
                {
{{list_expression}}
                }
            }
            return (result_where, result_order);
        }
        #endregion
    }
}
