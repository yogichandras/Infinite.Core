//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using INFINITE.CORE.Data.Base.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using {{namespace}}Data;
using {{namespace}}Shared.Attributes;
using {{namespace}}Core.Helper;
using {{namespace}}Core.Request;

namespace {{namespace}}Core.{{name}}.Command
{

    #region Request
    public class Edit{{name}}Mapping: Profile
    {
        public Edit{{name}}Mapping()
        {
            CreateMap<Edit{{name}}Request, {{name}}Request>().ReverseMap();
        }
    }
    public class Edit{{name}}Request :{{name}}Request, IMapRequest<{{namespace}}Data.Model.{{model}}, Edit{{name}}Request>,IRequest<StatusResponse>
    {
        [Required]
        public {{primary_key_type}} Id { get; set; }
        [Required]
        public string Inputer { get; set; }
        public void Mapping(IMappingExpression<Edit{{name}}Request, {{namespace}}Data.Model.{{model}}> map)
        {
            //use this for mapping
            //map.ForMember(d => d.EF_COLUMN, opt => opt.MapFrom(s => s.Object));
        }
    }
    #endregion

    internal class Edit{{name}}Handler : IRequestHandler<Edit{{name}}Request, StatusResponse>
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public Edit{{name}}Handler(
            ILogger<Edit{{name}}Handler> logger,
            IMapper mapper,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _mapper = mapper;
            _context = context;
        }
        public async Task<StatusResponse> Handle(Edit{{name}}Request request, CancellationToken cancellationToken)
        {
            StatusResponse result = new StatusResponse();
            try
            {
                var existingItems = await _context.Entity<{{namespace}}Data.Model.{{model}}>().Where(d => d.{{primary_key_name}} == request.Id).FirstOrDefaultAsync();
                if (existingItems != null)
                {
                    var item = _mapper.Map(request, existingItems);
                    {{>update_by}}item.{{update_by_name}} = request.Inputer;{{<update_by}}
                    {{>update_date}}item.{{update_date_name}} = DateTime.Now;{{<update_date}}
                    var update = await _context.UpdateSave(item);
                    if (update.Success)
                        result.OK();
                    else
                        result.BadRequest(update.Message);

                    return result;
                }
                else
                    result.NotFound($"Id {{name}} {request.Id} Tidak Ditemukan");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Edit {{name}}", request);
                result.Error("Failed Edit {{name}}", ex.Message);
            }
            return result;
        }
    }
}
