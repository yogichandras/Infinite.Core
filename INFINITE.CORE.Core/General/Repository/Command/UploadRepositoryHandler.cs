//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using MediatR;
using INFINITE.CORE.Data.Base.Interface;
using System.ComponentModel.DataAnnotations;
using Microsoft.Extensions.Logging;
using INFINITE.CORE.Data;
using INFINITE.CORE.Shared.Attributes;
using INFINITE.CORE.Core.Helper;
using INFINITE.CORE.Core.Request;
using Microsoft.Extensions.Options;

namespace INFINITE.CORE.Core.Repository.Command
{

    #region Request
    public class UploadRepositoryMapping: Profile
    {
        public UploadRepositoryMapping()
        {
            CreateMap<UploadRepositoryRequest, RepositoryRequest>().ReverseMap();
        }
    }
    public class UploadRepositoryRequest :RepositoryRequest,IRequest<ObjectResponse<Guid>>
    {
        [Required]
        public string Inputer { get; set; }
    }
    #endregion

    internal class UploadRepositoryHandler : IRequestHandler<UploadRepositoryRequest, ObjectResponse<Guid>>
    {
        private readonly ILogger _logger;
        private readonly ApplicationConfig _config;
        private readonly IMediator _mediator;
        private readonly IUnitOfWork<ApplicationDBContext> _context;
        public UploadRepositoryHandler(
            ILogger<UploadRepositoryHandler> logger,
            IOptions<ApplicationConfig> options,
            IMediator mediator,
            IUnitOfWork<ApplicationDBContext> context
            )
        {
            _logger = logger;
            _config = options.Value;
            _mediator = mediator;
            _context = context;
        }
        public async Task<ObjectResponse<Guid>> Handle(UploadRepositoryRequest request, CancellationToken cancellationToken)
        {
            ObjectResponse<Guid> result = new ObjectResponse<Guid>();
            try
            {
                Guid id = Guid.NewGuid();

                var target_path = Path.Combine(_config.MediaPath);
                if (!Directory.Exists(target_path))
                    Directory.CreateDirectory(target_path);

                var path = Path.Combine(target_path, id.ToString());
                File.WriteAllBytes(path, Convert.FromBase64String(request.File.Base64));


                    var add = await _context.AddSave(new Data.Model.Repository()
                    {
                        Id = id,
                        Code = request.Code,
                        Modul = request.Modul.ToString(),
                        Description = request.Description,
                        FileName = request.File.Filename,
                        Extension = Path.GetExtension(request.File.Filename),
                        MimeType = MimeTypes.MimeTypeMap.GetMimeType(Path.GetExtension(request.File.Filename)),
                        IsPublic = request.IsPublic,
                        CreateBy = request.Inputer,
                        CreateDate = DateTime.Now
                    });

                    if (add.Success)
                    {
                        result.Data = id;
                        result.OK();
                    }
                    else
                        result.BadRequest(add.Message);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed Upload Repository", request);
                result.Error("Failed Upload Repository", ex.Message);
            }
            return result;
        }
    }
}

